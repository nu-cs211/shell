.\" Manual page for CS 211 homework submission instructions.
.de sh
.  RS 4
\\fIsh%\\fR \\$*
.  RE
..
.\"
.TH SUBMIT211 7 "January 16, 2019" "Jesse A. Tov"
.\"
.SH "NAME"
.B submit211
\- CS 211 homework submission guide
.\"
.SH "INTRODUCTION"
For the first half of the course, CS 211 homework assignments must be
submitted from your CS login shell using the
.BR gsc (1)
command, which is a client for the GSC homework server.
This guide describes the steps to submit your homework and check its
status. For more details on using the
.B gsc
command, see its manual page.
.PP
The GSC homework server stores your submitted files for each homework.
It allows you to resubmit as many times as you like until the due date.
There are not separate steps to upload files and to complete your
submission; rather, whatever files you have uploaded as of the due date
are your submission.
.PP
This guide is organized into tasks that you will need to perform once,
and tasks you may need to perform often.
.\"
.SH "ONE-TIME TASK"
.SS "Setting up your GSC account"
Before you can submit your homework for the first time, you need to
create an account on the GSC server and then save your credentials in
the command-line client. Start by logging into to your Unix shell
account and \fIpreparing to run\fR the following command:
.PP
.sh gsc auth <\fINETID\fR>
.PP
Don't type the angle brackets; if your username were \fIabc1234\fR,
for example, you would run this command:
.PP
.sh gsc auth abc1234
.PP
In order to run \fIgsc auth\fR, you will need your \fBGSC API key\fR,
which you must obtain from the GSC website, at
.PP
.RS 4
.IR https://cs211.cs.northwestern.edu/gsc/profile/ .
.RE
.PP
You may need to authenticate with with Northwestern's single sign-on
system, but then you should be taken to your profile page with
your API key. Click the API key to copy it to your clipboard.
Then run the
.B "gsc auth"
command that you prepared, pasting the API key when requested.
.\"
.SH "COMMON TASKS"
.SS "Submitting your files"
To submit your homework, you need to upload any files that you modified
from the original starter code. To upload one or more files
<\fIFILE\fR>\fI...\fR to Homework <\fIN\fR>, run
.PP
.sh gsc cp <\fIFILE\fR>\fI...\fR hw<\fIN\fR>:
.PP
For example, to upload files \fIbees.txt\fR and \fIwasps.txt\fR to
Homework 3, you would run
.PP
.sh gsc cp bees.txt wasps.txt hw3:
.PP
Or to upload all \fI.c\fR files in both the \fIsrc\fR and \fItest\fR
directories to Homework 1, run
.PP
.sh gsc cp src/*.c test/*.c hw1:
.PP
Be careful with this command, because uploading a file with the same
name as a file already on the server will replace it without warning.
.PP
Note also that the colon (\fI:\fR) following the homework number is
\fIrequired\fR, and you will get an error message if you forget it.
.\"
.SS "Viewing your submission"
Once you have uploaded your files, you should check to make sure that
your upload was successful. To list the files in Homework <\fIN\fR>,
run the command
.PP
.sh gsc ls hw<\fIN\fR>:
.PP
To see the contents of all files submitted for that same homework, run
the command
.PP
.sh gsc cat -a hw\<\fIN\fR>:
.PP
If that produces too much output to fit on the screen, you can page
through it by piping the output to the
.BR less (1)
command. For example, to see all the files submitted to Homework 1, one
screen at a time, run
.PP
.sh gsc cat -a hw1: | less
.\"
.SS "Testing your submission"
It's also a good idea to confirm that you've submitted the correct
set of files, and in particular, that your submitted files work when
combined with the starter code. This will make it more likely, though by
no means guaranteed, that your code will compile and run properly when
the grading tests are run on it.
One way to do this is to re-download the
starter code into
a temporary location, then download your submission on top of it, and
then test it.
.PP
Suppose you want to check your Homework 1 submission. You should create
a temporary directory for doing this check in, so that you don't
accidentally overwrite your actual work. So start by creating a
directory, changing into it, and downloading the starter code
thereto:
.PP
.sh mkdir check
.sh cd check
.sh tar -xvkf ~cs211/hw/hw01.tgz
.PP
(Note that giving the \fIk\fR flag to
.BR tar (1)
prevents it from overwriting existing files, such as your homework
solution.)
.PP
You should now have a directory \fIhw01\fR containing the Homework 1
starter code.
Next, download your Homework 1 submission on top of that starter
code:
.PP
.sh gsc cp -af hw1: hw01
.PP
Finally, try building and testing it:
.PP
.sh make -C hw01 all
.sh hw01/overlapped
.PP
When you're done, clean up by changing back out of the temporary
directory and removing it along with all of its contents:
.PP
.sh cd ..
.sh rm -R check
.\"
.SH "AUTHOR"
\fIjesse@cs\.northwestern\.edu\fR
.\"
.SH "SEE ALSO"
The full documentation for
.BR gsc (1)
is in its own manual page.
.PP
You may also find the manual pages for
.BR cd (1),
.BR less (1),
.BR make (1),
.BR mkdir (1),
.BR rm (1),
and
.BR tar (1)
useful.
